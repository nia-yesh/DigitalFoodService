# Generated by Django 2.1.5 on 2019-06-03 16:34

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(choices=[('RA', 'restaurant_admin'), ('KA', 'kitchen_admin'), ('DE', 'default')], default='DE', max_length=2)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax', models.PositiveIntegerField(default=1)),
                ('service_charge', models.PositiveIntegerField(default=1)),
                ('packaging_cost', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_name', models.CharField(max_length=100, unique=True)),
                ('food_details', models.CharField(blank=True, max_length=1000)),
                ('food_availability', models.BooleanField(default=True)),
                ('cost', models.PositiveIntegerField()),
                ('food_img', models.ImageField(upload_to='Food_Images')),
                ('takeaway_price', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('cost', models.PositiveIntegerField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_food', to='restaurant_admin.Food')),
            ],
        ),
        migrations.CreateModel(
            name='OrderList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=1000, null=True)),
                ('takeaway', models.BooleanField(default=False, verbose_name='بیرون\u200cبر')),
                ('status', models.CharField(choices=[('NO', 'Not Ordered'), ('CH', 'Changed Order'), ('OR', 'Ordered'), ('PR', 'Preparing'), ('RE', 'Ready'), ('DE', 'Delivered')], default='NO', max_length=2)),
                ('cost', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=1000)),
                ('good_response', models.IntegerField(default=0)),
                ('medium_response', models.IntegerField(default=0)),
                ('bad_response', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('sub_id', models.AutoField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='کد اشتراک')),
                ('sub_name', models.CharField(max_length=100, verbose_name='نام')),
                ('sub_lastName', models.CharField(max_length=100, verbose_name='نام خانوادگی')),
                ('sub_birthDate', models.DateField(blank=True, null=True, verbose_name='تاریخ تولد')),
                ('sub_address', models.CharField(max_length=1000, verbose_name='آدرس')),
                ('sub_phone', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(regex='0(21|26|25|86|24|23|81|28|31|44|11|74|83|51|45|17|41|54|87|71|66|34|56|13|77|76|61|38|58|35|84)[0-9]+')], verbose_name='شماره تلفن')),
                ('sub_mobile_phone', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message="your number isn't correct.\n                                        true formats :\n                                        1) +989999999999 2)09999999999", regex='^(\\+98|0)?9\\d{9}')], verbose_name='شماره تلفن همراه')),
            ],
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('table_number', models.IntegerField(primary_key=True, serialize=False)),
                ('table_availability', models.BooleanField(default=True)),
                ('reservation_state', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('f_name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=3, verbose_name={'CA': 'Cashier', 'CH': 'Chef', 'MCH': 'Master Chef', 'W': 'Waitress'})),
                ('home_addr', models.CharField(max_length=1000)),
                ('phone_number', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(regex='0(21|26|25|86|24|23|81|28|31|44|11|74|83|51|45|17|41|54|87|71|66|34|56|13|77|76|61|38|58|35|84)[0-9]+')])),
                ('mobile_number', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message="your number isn't correct.\n                                        true formats :\n                                        1) +989999999999 2)09999999999", regex='^(\\+98|0)?9\\d{9}')])),
                ('profile', models.ImageField(upload_to='')),
                ('published_date', models.DateField(default=datetime.datetime(2019, 6, 3, 16, 34, 35, 328087, tzinfo=utc))),
                ('national_code', models.IntegerField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='orderlist',
            name='table',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='OrderList_Table', to='restaurant_admin.Table'),
        ),
        migrations.AddField(
            model_name='foodorder',
            name='order_list',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FoodOrder_list', to='restaurant_admin.OrderList'),
        ),
        migrations.AddField(
            model_name='food',
            name='food_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foods', to='restaurant_admin.FoodCategory'),
        ),
    ]
